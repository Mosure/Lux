Shader "ReactiveImageShader"
{
	Properties
	{

	}
	SubShader
	{
		// No culling or depth
		Cull Off ZWrite Off ZTest Always

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			#define LOUDNESS_LENGTH 128.0
			#define TOTAL_LENGTH 1.25
			#define RING_WIDTH TOTAL_LENGTH / LOUDNESS_LENGTH

			float _LoudnessArray[LOUDNESS_LENGTH];
			uint _LoudnessArrayIndex;

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 vertex : SV_POSITION;
			};

			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.uv = v.uv;
				return o;
			}

			float quad(in float x) {
				return saturate(1 - x * x);
			}

			float tri(in float x) {
				return saturate(1 - abs(x));
			}

			float ring(in float d, in float radius) {
				return tri((d - radius) / RING_WIDTH);
			}

			fixed4 frag (v2f i) : SV_Target
			{
				float2 st = (i.vertex.xy * 2.0 - _ScreenParams.xy) / max(_ScreenParams.x, _ScreenParams.y);

				float3 c = float3(0.0, 0.0, 0.0);

				// TODO: We know which ring the pixel will be in so we don't need this (may be sum of a two rings)
				//for (uint i = 0; i < LOUDNESS_LENGTH; i++) {
				//	uint index = ((_LoudnessArrayIndex + LOUDNESS_LENGTH) - i) % LOUDNESS_LENGTH;
				//
				float d = sqrt(dot(st, st));
				c.r += ring(d, 3 * RING_WIDTH);
				//	c.g += _LoudnessArray[index] * ring(st, i * RING_WIDTH, RING_WIDTH);
				//	c.b += _LoudnessArray[index] * ring(st, i * RING_WIDTH, RING_WIDTH);
				//}


				//uint ring_num = d / RING_WIDTH;
				//ring_num = 3;

				//uint index = ((_LoudnessArrayIndex + LOUDNESS_LENGTH) - ring_num) % LOUDNESS_LENGTH;
				//uint next_index = (index + 1) % LOUDNESS_LENGTH;

				//c.g += _LoudnessArray[index] * ring(d, ring_num * RING_WIDTH);
				//c.g = ring(d, (ring_num + 1) * RING_WIDTH);

				return float4(c, 1.0);
			}
			ENDCG
		}
	}
}
